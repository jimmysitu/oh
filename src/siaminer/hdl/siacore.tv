// vim:ft=verilog ts=4


module siacore(/*AUTOARG*/);
    input   clk;
    input   rst;
    input             valid;    // new work is valid
    input   [639:0]   work;     // 80B work data
    input   [63:0]    target;   // hash target

    output            busy;     // busy with hashing
    output            found;    // found hash < target
    output  [31:0]    nonce;    // nonce of current hash

    /*AUTOWIRE*/
    /*AUTOREG*/
<%
wStr = ""
for r in range(0, 12):
    for i in range(0, 8):
        isuf = "%02d_%02d" % (r, (2*i  ))
        osuf = "%02d_%02d" % (r, (2*i+1))
        if i < 4:
            wStr += "\twire [63:0] a_%s, b_%s, c_%s, d_%s;\n" % (isuf, isuf, isuf, isuf)
            wStr += "\twire [63:0] a_%s, b_%s, c_%s, d_%s;\n" % (osuf, osuf, osuf, osuf)
        else:
            wStr += "\twire [63:0] a_%s, b_%s, c_%s, d_%s;\n" % (osuf, osuf, osuf, osuf)
    wStr += "\twire [63:0] m04_%02d, m04_%02d;\n" % (r*2+1, r*2+2)
    wStr += "\twire vld_%02d, vld_%02d;\n" % (r*2+1, r*2+2)
    wStr += "\n"
%>
${wStr}

    wire loadBusy;

    load uLoad(
        .busy(loadBusy),
        /*AUTOINST*/);

    wire        vld_00 = loadBusy;
    wire [63:0] m04_00 = m04[63:0];

    compare uCompare(
            .m04(m04_24),
            .v0(a_11_09[63:0]),
            .v8(c_11_13[63:0]),
            .valid(vld_24),
            /*AUTOINST*/);


    // Initial Vectors
    assign a_00_00 = 64'h6a09e667f2bdc928;
    assign a_00_02 = 64'hbb67ae8584caa73b;
    assign a_00_04 = 64'h3c6ef372fe94f82b;
    assign a_00_06 = 64'ha54ff53a5f1d36f1;

    assign b_00_00 = 64'h510e527fade682d1;
    assign b_00_02 = 64'h9b05688c2b3e6c1f;
    assign b_00_04 = 64'h1f83d9abfb41bd6b;
    assign b_00_06 = 64'h5be0cd19137e2179;

    assign c_00_00 = 64'h6a09e667f3bcc908;
    assign c_00_02 = 64'hbb67ae8584caa73b;
    assign c_00_04 = 64'h3c6ef372fe94f82b;
    assign c_00_06 = 64'ha54ff53a5f1d36f1;

    assign d_00_00 = 64'h510e527fade68281;
    assign d_00_02 = 64'h9b05688c2b3e6c1f;
    assign d_00_04 = 64'he07c265404be4294;
    assign d_00_06 = 64'h5be0cd19137e2179;


    // Signal assignment between rounds
% for r in range(1, 12):
    assign a_${"%02d" % r}_00 = a_${"%02d" % (r-1)}_09;
    assign a_${"%02d" % r}_02 = a_${"%02d" % (r-1)}_11;
    assign a_${"%02d" % r}_04 = a_${"%02d" % (r-1)}_13;
    assign a_${"%02d" % r}_06 = a_${"%02d" % (r-1)}_15;

    assign b_${"%02d" % r}_00 = b_${"%02d" % (r-1)}_15;
    assign b_${"%02d" % r}_02 = b_${"%02d" % (r-1)}_09;
    assign b_${"%02d" % r}_04 = b_${"%02d" % (r-1)}_11;
    assign b_${"%02d" % r}_06 = b_${"%02d" % (r-1)}_13;

    assign c_${"%02d" % r}_00 = c_${"%02d" % (r-1)}_13;
    assign c_${"%02d" % r}_02 = c_${"%02d" % (r-1)}_15;
    assign c_${"%02d" % r}_04 = c_${"%02d" % (r-1)}_09;
    assign c_${"%02d" % r}_06 = c_${"%02d" % (r-1)}_11;

    assign d_${"%02d" % r}_00 = d_${"%02d" % (r-1)}_11;
    assign d_${"%02d" % r}_02 = d_${"%02d" % (r-1)}_13;
    assign d_${"%02d" % r}_04 = d_${"%02d" % (r-1)}_15;
    assign d_${"%02d" % r}_06 = d_${"%02d" % (r-1)}_09;


% endfor

% for r in range(0, 12):
    ${compress(r)}
% endfor

endmodule

<%def name="compress(r)">
<%
sigma = [
    [ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  10, 11, 12, 13, 14, 15 ] ,
    [ 14, 10, 4,  8,  9,  15, 13, 6,  1,  12, 0,  2,  11, 7,  5,  3  ] ,
    [ 11, 8,  12, 0,  5,  2,  15, 13, 10, 14, 3,  6,  7,  1,  9,  4  ] ,
    [ 7,  9,  3,  1,  13, 12, 11, 14, 2,  6,  5,  10, 4,  0,  15, 8  ] ,
    [ 9,  0,  5,  7,  2,  4,  10, 15, 14, 1,  11, 12, 6,  8,  3,  13 ] ,
    [ 2,  12, 6,  10, 0,  11, 8,  3,  4,  13, 7,  5,  15, 14, 1,  9  ] ,
    [ 12, 5,  1,  15, 14, 13, 4,  10, 0,  7,  6,  3,  9,  2,  8,  11 ] ,
    [ 13, 11, 7,  14, 12, 1,  3,  9,  5,  0,  15, 4,  8,  6,  2,  10 ] ,
    [ 6,  15, 14, 9,  11, 3,  0,  8,  12, 2,  13, 7,  1,  4,  10, 5  ] ,
    [ 10, 2,  8,  4,  7,  6,  1,  5,  15, 11, 9,  14, 3,  12, 13, 0  ] ,
    [ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  10, 11, 12, 13, 14, 15 ] ,
    [ 14, 10, 4,  8,  9,  15, 13, 6,  1,  12, 0,  2,  11, 7,  5,  3  ]
];
%>
//======== Round ${r} ========
% for i in range(0, 8):
<%
    if i < 4:
        aisuf = "%02d_%02d" % (r, (2*i  ))
        bisuf = "%02d_%02d" % (r, (2*i  ))
        cisuf = "%02d_%02d" % (r, (2*i  ))
        disuf = "%02d_%02d" % (r, (2*i  ))
    else:
        aisuf = "%02d_%02d" % (r, (2*((i+0)%4)+1))
        bisuf = "%02d_%02d" % (r, (2*((i+1)%4)+1))
        cisuf = "%02d_%02d" % (r, (2*((i+2)%4)+1))
        disuf = "%02d_%02d" % (r, (2*((i+3)%4)+1))

    aosuf = "%02d_%02d" % (r, (2*i+1))
    bosuf = "%02d_%02d" % (r, (2*i+1))
    cosuf = "%02d_%02d" % (r, (2*i+1))
    dosuf = "%02d_%02d" % (r, (2*i+1))

    xiStr = ("m" + "%02d" % sigma[r][2*i]  ) if sigma[r][2*i]   != 4 else ("m04_" + "%02d" % (r*2+i//4))
    yiStr = ("m" + "%02d" % sigma[r][2*i+1]) if sigma[r][2*i+1] != 4 else ("m04_" + "%02d" % (r*2+i//4))
%>
    mix uMix_${"%02d" % r}_${"%02d" % i}(
        .clk(clk), .rst(rst),
        .xIn(${xiStr}),     .yIn(${yiStr}),
        .aIn (a_${aisuf}), .bIn (b_${bisuf}), .cIn (c_${cisuf}), .dIn (d_${disuf}),
        .aOut(a_${aosuf}), .bOut(b_${bosuf}), .cOut(c_${cosuf}), .dOut(d_${dosuf})
    );
    % if 3 == (i % 4):

    pipe Upipe_${"%02d" % r}_${"%02d" % i}(
        .clk(clk), .rst(rst), .found(found), .valid(valid),
        .m04In(m04_${"%02d" % (r*2+i//4)}), .m04Out(m04_${"%02d" % (r*2+1+i//4)}),
        .vldIn(vld_${"%02d" % (r*2+i//4)}), .vldOut(vld_${"%02d" % (r*2+1+i//4)})
    );
    % endif
% endfor
</%def>
