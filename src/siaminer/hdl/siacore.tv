// vim:ft=verilog ts=4


module siacore(/*AUTOARG*/);
    input   clk;
    input   rst;
    input             valid;    // new work is valid
    input   [639:0]   work;     // 80B work data
    input   [31:0]    target;   // hash target

    output            done;     // hash is done
    output            found;    // found hash < target
    output  [31:0]    nonce;    // nonce of current hash

    /*AUTOWIRE*/
    /*AUTOREG*/
<%
wStr = ""
for r in range(0, 12):
    for i in range(0, 8):
        isuf = "%02d_%02d" % (r, (2*i  ))
        osuf = "%02d_%02d" % (r, (2*i+1))
        if i < 4:
            wStr += "\twire [63:0] a_%s, b_%s, c_%s, d_%s;\n" % (isuf, isuf, isuf, isuf)
            wStr += "\twire [63:0] a_%s, b_%s, c_%s, d_%s;\n" % (osuf, osuf, osuf, osuf)
        else:
            wStr += "\twire [63:0] a_%s, b_%s, c_%s, d_%s;\n" % (osuf, osuf, osuf, osuf)
    wStr += "\n"
%>
${wStr} 
    load load(/*AUTOINST*/);

    compare compare(
        .v0(a_11_01[63:0]),
        .v8(c_11_13[63:0]),
        /*AUTOINST*/);

% for r in range(0, 12):
    ${compress(r)}
% endfor

endmodule

<%def name="compress(r)">
<%
sigma = [
    [ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  10, 11, 12, 13, 14, 15 ] ,
    [ 14, 10, 4,  8,  9,  15, 13, 6,  1,  12, 0,  2,  11, 7,  5,  3  ] ,
    [ 11, 8,  12, 0,  5,  2,  15, 13, 10, 14, 3,  6,  7,  1,  9,  4  ] ,
    [ 7,  9,  3,  1,  13, 12, 11, 14, 2,  6,  5,  10, 4,  0,  15, 8  ] ,
    [ 9,  0,  5,  7,  2,  4,  10, 15, 14, 1,  11, 12, 6,  8,  3,  13 ] ,
    [ 2,  12, 6,  10, 0,  11, 8,  3,  4,  13, 7,  5,  15, 14, 1,  9  ] ,
    [ 12, 5,  1,  15, 14, 13, 4,  10, 0,  7,  6,  3,  9,  2,  8,  11 ] ,
    [ 13, 11, 7,  14, 12, 1,  3,  9,  5,  0,  15, 4,  8,  6,  2,  10 ] ,
    [ 6,  15, 14, 9,  11, 3,  0,  8,  12, 2,  13, 7,  1,  4,  10, 5  ] ,
    [ 10, 2,  8,  4,  7,  6,  1,  5,  15, 11, 9,  14, 3,  12, 13, 0  ] ,
    [ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  10, 11, 12, 13, 14, 15 ] ,
    [ 14, 10, 4,  8,  9,  15, 13, 6,  1,  12, 0,  2,  11, 7,  5,  3  ]
];
%>
//======== Round ${r} ========
% for i in range(0, 8):
<%
    if i < 4:
        aisuf = "%02d_%02d" % (r, (2*i  ))
        bisuf = "%02d_%02d" % (r, (2*i  ))
        cisuf = "%02d_%02d" % (r, (2*i  ))
        disuf = "%02d_%02d" % (r, (2*i  ))
    else:
        aisuf = "%02d_%02d" % (r, (2*(i%4)+1))
        bisuf = "%02d_%02d" % (r, (2*(i%4)+3))
        cisuf = "%02d_%02d" % (r, (2*(i%4)+5))
        disuf = "%02d_%02d" % (r, (2*(i%4)+7))

    aosuf = "%02d_%02d" % (r, (2*i+1))
    bosuf = "%02d_%02d" % (r, (2*i+1))
    cosuf = "%02d_%02d" % (r, (2*i+1))
    dosuf = "%02d_%02d" % (r, (2*i+1))
%>
    mix mix_${"%02d" % r}_${"%02d" % i}(
        .clk(clk), .rst(rst),
        .xIn(m${"%02d" % sigma[r][2*i]}),     .yIn(m${"%02d" % sigma[r][2*i+1]}),
        .aIn (a_${aisuf}), .bIn (b_${bisuf}), .cIn (c_${cisuf}), .dIn (d_${disuf}),
        .aOut(a_${aosuf}), .bOut(b_${bosuf}), .cOut(c_${cosuf}), .dOut(d_${dosuf})
    );
% endfor
</%def>
